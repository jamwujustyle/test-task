{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Online Store API, probably",
    "description": "API for user registration, login, profile management, and administrative actions."
  },
  "host": "localhost:5000",
  "basePath": "/",
  "schemes": ["http"],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["users"],
        "summary": "Register a new user",
        "description": "Registers a new user with the provided username, email, and password.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": { "type": "string" },
                "email": { "type": "string" },
                "password": { "type": "string" },
                "role": { "type": "string", "default": "user" }
              }
            }
          }
        ],
        "responses": {
          "201": { "description": "User registered successfully" },
          "400": { "description": "Invalid data or user already exists" },
          "500": { "description": "Error inserting into database" }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["users"],
        "summary": "User login",
        "description": "Logs in a user and returns an access token.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "password": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "201": { "description": "Access token returned" },
          "403": { "description": "Bad request or missing email/password" },
          "404": { "description": "User not found" }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": ["users"],
        "summary": "Get current user",
        "description": "Returns the information of the current logged-in user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": { "description": "User data returned" },
          "400": { "description": "User ID not found in token" },
          "404": { "description": "User not found" }
        }
      }
    },
    "/users/get": {
      "get": {
        "tags": ["users"],
        "summary": "Get all users",
        "description": "Fetches all users from the database (admin access required).",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "201": { "description": "List of users returned" },
          "401": { "description": "Access denied" }
        }
      }
    },
    "/users/get/{id}": {
      "get": {
        "tags": ["users"],
        "summary": "Get user by ID",
        "description": "Fetches a user by their ID (admin access required).",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "description": "ID of the user"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "201": { "description": "User data returned" },
          "401": { "description": "Access denied" },
          "404": { "description": "User not found" }
        }
      }
    },
    "/users/put/{id}": {
      "put": {
        "tags": ["users"],
        "summary": "update user by id (PUT)",
        "description": "Updates user by id. fields with no provided info will be lost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "description": "id of the user"
          },
           {
              "in": "body",
              "name": "body",
              "schema": {
              "type": "object",
              "properties": {
                "username": {"type": "string"},
                "email": {"type": "string"},
                "password": {"type": "string"},
                "role": {"type": "string"}
              }
            }
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "201": {"description": "user data has been updated"},
          "401": {"description": "access denied"},
          "404": {"description": "user at the given id is not found"}
        }
      }
    },
    "/users/patch/{id}": {
      "patch": {
        "tags": ["users"],
        "summary": "updated user by id (PATCH)",
        "description": "updates user by id while preserving existing data for missing fields",
        "parameters": [
          {
            "in": "path",
          "name": "id",
          "required": true,
         "type": "integer",
         "description": "user id to update"
         },
         {
          "in": "body", 
          "name": "body",
          "schema": {
            "type": "object",
            "properties": {
              "username": {"type": "string"},
              "email": {"type": "string"},
              "password": {"type": "string"},
              "role": {"type": "string"}
            }
          }
         }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": [
          {
            "200": {"description": "user data has been updated"},
            "401": {"description": "access denied"},
            "404": {"description": "user at the given id is not found"}
          }
        ]
      }
    },
    
    "/users/delete/{id}": {
      "delete": {
        "tags": ["users"],
        "summary": "delete user",
        "description": "deletes user at the given id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          } 
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
            "200": {"description": "deleted user successfully. serial sequence reset to min available"},
            "400": {"description": "could not resolve for user at the given id"},
            "404": {"description": "user at the given id is not found"}
        }
      }
    },
    "/categories/post": {
    "post":{
      "tags": ["categories"],
      "summary": "post category",
      "description": "posts category with provied category id, name, description",
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "name": {"type": "string"},
              "description": {"type": "string"},
              "parent_category_id": {"type": "integer"}
            }
          }
         }
      ],
      "security": [
              {
                "BearerAuth": []
              }
            ],
            "responses": [
              {
                "201": {"description": "category has been created successfully"}, 
                "400": {"description": "missing required arguments"},
                "409": {"description": "no duplicate category names allowed"}
              }
            ]
    }
  },
  "/categories/get": {
    "get": {
      "tags": ["categories"],
      "summary": "get all categories", 
      "description": "fetches all existing categories",
      "security": [
        {
          "BearerAuth": []
        }
      ],
      "responses": [
        {
          "200": {"description": "List of users returned"},
          "401": {"description": "access denied"}
        }
      ]
    }
  },
  "/categories/get/{id}":{
    "get": {
      "tags": ["categories"],
      "summary": "get category by id",
      "description": "fetches category at the given id",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true
        }
      ],
      "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": [
          {
            "200": {"description": "returned category at the given id"},
            "404": {"description": "category at the given id not found"}
          }
        ]
    }
  },
  "/categories/put/{id}":{
    "put": {
      "tags": ["categories"],
      "summary": "post category",
      "description": "updates at the given id, missing fields get reset",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true
        },
        {
          "in": "body",
          "name": "body",
          "schema": {
            "type": "object",
            "properties": {
              "name": {"type": "string"},
              "description": {"type": "string"},
              "parent_category_id": {"type": "integer"}
            }
          }
        }
      ],
      "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": [
          {
            "201": {"description": "updated category at the given id"},
            "404": {"description": "category at the given id not found"}
          }
        ]
    }
  },
  "/categories/patch/{id}":{
    "patch": {
      "tags": ["categories"],
      "summary": "patch category",
      "description": "updates at the given id preserving existing data",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true
        },
        {
          "in": "body",
          "name": "body",
          "schema": {
            "type": "object",
            "properties": {
              "name": {"type": "string"},
              "description": {"type": "string"},
              "parent_category_id": {"type": "integer"}
            }
          }
        }
      ],
      "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": [
          {
            "201": {"description": "updated category at the given id"},
            "404": {"description": "category at the given id not found"}
          }
        ]
    }
  },
  "/categories/delete/{id}":{
    "delete": {
      "tags": ["categories"],
      "summary": "delete category",
      "description": "deletes user at the given id",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true
        }
      ],
      "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": [
          {
            "201": {"description": "deleted category at the given id. serial sequence reset to min available"},
            "404": {"description": "category at the given id not found"}
          }
        ]
    }
  },
  "/products/post": {
    "post": {
    "tags": ["products"],
    "summary": "post product",
    "description": "creates a product with provided data",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema":{
          "type": "object",
          "properties":{
            "name": {"type": "string"},
            "description": {"type": "string"},
            "category_id": {"type": "integer"},
            "price": {"type": "number", "format": "float"}
          }
        }
      }
    ],
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "responses": [
      {
        "201": {"description": "created product with provided data"},
        "401": {"description": "access denied"},
        "400": {"description": "missing required arguments"}
      }
    ]
  }
},
"/products/get": {
  "get":{
    "tags": ["products"],
    "summary": "get products",
    "description": "returns all products",
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "responses": [ {
      "200": {"description": "returned all existing products"},
      "404": {"description": "no products were found"}
    }
    ]
  }
},
"/products/get/{id}": {
  "get": {
    "tags": ["products"],
    "summary": "get product",
    "description": "returns product at the given id",
    "parameters":[
      {
        "in": "path",
        "name": "id",
        "required": true,
        "type": "integer"
      }
    ],
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "responses": [
      {
        "200": {"description": "retrieved product at the given id"},
        "404": {"description": "product at the given id not found"}
      }
    ]
  }
},
"/products/put/{id}": {
  "put": {
    "tags": ["products"],
    "summary": "update products",
    "description": "updated product at the given id, missing fields get reset",
    "parameters":[
      {
        "in": "path",
        "name": "id",
        "required": true,
        "type": "integer"
      },
      {
        "in": "body",
        "name": "body",
        "schema": {
          "type": "object",
          "properties":{
            "name": {"type": "string"},
            "category_id": {"type": "integer"},
            "price": {"type": "number", "format": "float"}
          }
        }
      }
    ],
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "responses": [
      {
        "201": {"description": "updated product at the given id successfully"},
        "404": {"description": "product at the given id not found"},
        "400": {"description": "missing required arguments"}
      }
    ]
  }
},
"/products/patch/{id}": {
  "patch": {
    "tags": ["products"],
    "summary": "update products",
    "description": "updates products at the given id, missing fields preserved",
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "type": "integer"
      },
      {
        "in": "body",
        "name": "body",
        "schema": {
          "type": "object",
          "properties": {
            "name": {"type": "string"},
            "price": {"type": "number", "format": "float"},
            "category_id": {"type": "integer"},
            "description": {"type": "string"}
          }
        }
      }
    ],
   "security": [
    {
      "BearerAuth": []
    }
   ],
   "responses": [
    {
      "201": {"description":"product data has been updated"},
      "400": {"description": "missing required arguments"},
      "404": {"description": "product at the given id not found"}
    }
   ]
  }
},
"/products/delete/{id}": {
  "delete": {
    "tags": ["products"],
    "summary": "delete product",
    "description": "deletes product at the given id",
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "type": "integer"
      }
    ],
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "responses": [
      {
        "200": {"description": "deleted product at the given id successfully"},
        "404": {"description": "product at the given id not found"}
      }
    ]
  }
},
"/orders/post": {
  "post": {
    "tags": ["orders"],
    "summary": "post order",
    "description": "creates an order with provided data",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "user_id": {"type": "integer"},
            "status": {"type": "string"},
            "shipping_status": {"type": "string"},
            "shipping_address": {"type": "string"},
            "payment_method": {"type": "string"},
            "payment_status": {"type": "string"},
            "order_items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "product_id": {"type": "integer"},
                  "quantity": {"type": "integer"}
                }
              }
            }
          }
        }
      }
    ],
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "responses": {
      "201": {"description": "created order with provided data"},
      "401": {"description": "access denied"},
      "400": {"description": "missing required arguments"}
    }
  }
},
"/orders/get": {
  "get":{
    "tags": ["orders"],
    "summary": "get orders",
    "description": "returns all orders",
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "responses": [ {
      "200": {"description": "returned all existing orders"},
      "404": {"description": "no orders were found"}
    }
    ]
  }
},
"/orders/get/{id}": {
  "get": {
    "tags": ["orders"],
    "summary": "get orders",
    "description": "returns orders at the given id",
    "parameters":[
      {
        "in": "path",
        "name": "id",
        "required": true,
        "type": "integer"
      }
    ],
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "responses": [
      {
        "200": {"description": "retrieved orders at the given id"},
        "404": {"description": "orders at the given id not found"}
      }
    ]
  }
},
"/orders/put/{id}": {
  "put": {
    "tags": ["orders"],
    "summary": "update orders",
    "description": "updated orders at the given id, missing fields get reset",
    "parameters":[
      {
        "in": "path",
        "name": "id",
        "required": true,
        "type": "integer"
      },
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "user_id": {"type": "integer"},
            "status": {"type": "string"},
            "shipping_status": {"type": "string"},
            "shipping_address": {"type": "string"},
            "payment_method": {"type": "string"},
            "payment_status": {"type": "string"},
            "order_items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "product_id": {"type": "integer"},
                  "quantity": {"type": "integer"}
                }
              }
            }
          }
        }
      }
    ],
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "responses": [
      {
        "201": {"description": "updated orders at the given id successfully"},
        "404": {"description": "orders at the given id not found"},
        "400": {"description": "missing required arguments"}
      }
    ]
  }
},
"/orders/patch/{id}": {
  "patch": {
    "tags": ["orders"],
    "summary": "update orders",
    "description": "updates orders at the given id, missing fields preserved",
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "type": "integer"
      },
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "user_id": {"type": "integer"},
            "status": {"type": "string"},
            "shipping_status": {"type": "string"},
            "shipping_address": {"type": "string"},
            "payment_method": {"type": "string"},
            "payment_status": {"type": "string"},
            "order_items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "product_id": {"type": "integer"},
                  "quantity": {"type": "integer"}
                }
              }
            }
          }
        }
      }
    ],
   "security": [
    {
      "BearerAuth": []
    }
   ],
   "responses": [
    {
      "201": {"description":"product data has been updated"},
      "400": {"description": "missing required arguments"},
      "404": {"description": "product at the given id not found"}
    }
   ]
  }
},
"/orders/delete/{id}": {
  "delete": {
    "tags": ["orders"],
    "summary": "delete orders",
    "description": "deletes orders at the given id",
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "type": "integer"
      }
    ],
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "responses": [
      {
        "200": {"description": "deleted orders at the given id successfully"},
        "404": {"description": "orders at the given id not found"}
      }
    ]
  }
}
  },
  
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "JWT Authorization header using the Bearer scheme. Example: 'Bearer {token}'"
    }
  }
}
